import logging
import os
import sys
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
from telegram.error import TimedOut, NetworkError, Forbidden, TelegramError
import asyncio
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Bot_Core.responders.generator import generate_responder, generate_interview_response
from Bot_Core.validation.validator import ProfileValidator
from Bot_Core.data.database import DatabaseManager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = f"bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
logger.info(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")
logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
logger.info(f"–§–∞–π–ª –ª–æ–≥–∞: {log_file}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not os.getenv('TELEGRAM_BOT_TOKEN'):
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)
else:
    logger.info("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_RESPONDENT, WAITING_PROFESSION, WAITING_AGE, INTERVIEW, HYPOTHESIS_INPUT = range(5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = DatabaseManager()
validator = ProfileValidator()

async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        keyboard = [
            [
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞", callback_data='new_responder'),
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data='start_interview')
            ],
            [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data='analysis')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Custos AI Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "üéØ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤\n"
            "üó£ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é\n"
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return CHOOSING_RESPONDENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {str(e)}")
        logger.error(traceback.format_exc())
        raise

async def button_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        
        if query.data == 'new_responder':
            keyboard = [
                [
                    InlineKeyboardButton("–°–∫–µ–ø—Ç–∏–∫", callback_data='trait_skeptic'),
                    InlineKeyboardButton("–ë–æ–ª—Ç–ª–∏–≤—ã–π", callback_data='trait_chatty')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞:",
                reply_markup=reply_markup
            )
            logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞")
            return CHOOSING_RESPONDENT
        
        elif query.data.startswith('trait_'):
            trait = query.data.split('_')[1]
            logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: {trait}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π trait –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['trait'] = trait
            
            await query.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±—É—Ö–≥–∞–ª—Ç–µ—Ä, product manager, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫):"
            )
            return WAITING_PROFESSION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ button_handler: {str(e)}")
        logger.error(traceback.format_exc())
        raise

async def handle_profession(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        profession = update.message.text
        context.user_data['profession'] = profession
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}")
        
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 80):"
        )
        return WAITING_AGE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_profession: {str(e)}")
        logger.error(traceback.format_exc())
        raise

async def handle_age(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        try:
            age = int(update.message.text)
            if age < 18 or age > 80:
                await update.message.reply_text(
                    "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 80 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return WAITING_AGE
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_AGE

        context.user_data['age'] = age
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç: {age}")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
        await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞...")
        
        try:
            result = await generate_responder(
                age=context.user_data['age'],
                profession=context.user_data['profession'],
                trait=context.user_data['trait']
            )
            
            if not result['success']:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: {result['message']}")
                await update.message.reply_text(result['message'])
                return CHOOSING_RESPONDENT

            profile = result['data']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            respondent = db.create_respondent(
                name=profile['name'],
                age=profile['age'],
                profession=profile['profession'],
                trait=context.user_data['trait'],
                profile=profile
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['current_respondent_id'] = respondent.id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–µ
            await update.message.reply_text(result['message'])
            return INTERVIEW

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: {str(e)}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CHOOSING_RESPONDENT

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_age: {str(e)}")
        logger.error(traceback.format_exc())
        raise

async def handle_interview_message(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    try:
        question = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
        respondent_id = context.user_data.get('current_respondent_id')
        if not respondent_id:
            await update.message.reply_text(
                "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞."
            )
            return CHOOSING_RESPONDENT
            
        respondent = db.get_respondent(respondent_id)
        if not respondent:
            await update.message.reply_text(
                "‚ùå –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞."
            )
            return CHOOSING_RESPONDENT
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
        try:
            await update.message.reply_text(
                "ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
            )
            
            answer = await generate_interview_response(question, respondent.profile)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            current_interview = context.user_data.get('current_interview')
            if not current_interview:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                current_interview = db.create_interview(
                    respondent_id=respondent_id,
                    hypothesis=context.user_data.get('hypothesis', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                )
                context.user_data['current_interview'] = current_interview
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
            db.add_response(current_interview.id, {
                "question": question,
                "answer": answer,
                "timestamp": datetime.now().isoformat()
            })
            
            await update.message.reply_text(answer)
            return INTERVIEW
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑."
            )
            return INTERVIEW
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_interview_message: {str(e)}")
        logger.error(traceback.format_exc())
        raise

async def error_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É {context.error}")
    logger.error(traceback.format_exc())
    
    if isinstance(context.error, TimedOut):
        logger.warning("–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
        await asyncio.sleep(1)
    elif isinstance(context.error, NetworkError):
        logger.warning("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏")
        logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)
    elif isinstance(context.error, Forbidden):
        logger.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω")
    elif isinstance(context.error, TelegramError):
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {context.error}")
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")
        logger.error(traceback.format_exc())

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        application = (
            Application.builder()
            .token(os.getenv('TELEGRAM_BOT_TOKEN'))
            .connect_timeout(30)
            .read_timeout(30)
            .write_timeout(30)
            .get_updates_read_timeout(30)
            .get_updates_connect_timeout(30)
            .get_updates_write_timeout(30)
            .build()
        )
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                CHOOSING_RESPONDENT: [
                    CallbackQueryHandler(button_handler)
                ],
                WAITING_PROFESSION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profession)
                ],
                WAITING_AGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age)
                ],
                INTERVIEW: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_interview_message)
                ],
            },
            fallbacks=[CommandHandler('start', start)],
            per_message=False
        )

        application.add_handler(conv_handler)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        logger.critical(traceback.format_exc())
        sys.exit(1)

if __name__ == '__main__':
    main() 
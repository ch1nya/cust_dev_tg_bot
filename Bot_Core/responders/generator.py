import os
import json
import requests
import logging
from dotenv import load_dotenv
import asyncio
import re
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

load_dotenv()

logger = logging.getLogger(__name__)

def clean_json_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON"""
    # –£–¥–∞–ª—è–µ–º \boxed{ –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\\boxed{', '', text)
    text = re.sub(r'\\[^{]+{', '', text)  # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ LaTeX –∫–æ–º–∞–Ω–¥—ã
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞
    text = re.sub(r'```json\s*', '', text)
    text = re.sub(r'```\s*', '', text)
    text = text.strip()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã
    json_candidates = []
    depth = 0
    start = -1
    
    for i, char in enumerate(text):
        if char == '{':
            if depth == 0:
                start = i
            depth += 1
        elif char == '}':
            depth -= 1
            if depth == 0 and start != -1:
                json_candidate = text[start:i+1]
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                    json.loads(json_candidate)
                    json_candidates.append(json_candidate)
                except json.JSONDecodeError:
                    pass
    
    if json_candidates:
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON
        return max(json_candidates, key=len)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Ä—É—á–Ω—É—é
    start = text.find('{')
    end = text.rfind('}') + 1
    if start != -1 and end != 0:
        json_text = text[start:end]
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        while json_text.count('{') < json_text.count('}'):
            json_text = json_text[:-1]
        return json_text
    
    return text

def generate_llm_response(prompt: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API")
        logger.info(f"–ü—Ä–æ–º–ø—Ç: {prompt}")
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}"
        }
        
        payload = {
            "model": "deepseek/deepseek-r1-zero:free",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –¥–ª—è customer development –∏–Ω—Ç–µ—Ä–≤—å—é. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        }
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
        logger.info(f"URL: https://openrouter.ai/api/v1/chat/completions")
        logger.info(f"Headers: {json.dumps(headers, ensure_ascii=False)}")
        logger.info(f"Payload: {json.dumps(payload, ensure_ascii=False, indent=2)}")
        
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=60
        )
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status_code}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {json.dumps(result, indent=2, ensure_ascii=False)}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content = None
            try:
                if 'choices' in result and len(result['choices']) > 0:
                    message = result['choices'][0].get('message', {})
                    content = message.get('content') or message.get('reasoning')
                elif 'response' in result:
                    content = result['response']
                
                if not content:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ API: {result}")
                    return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API", "details": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ"}
                    
                logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
                logger.error(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {result}")
                return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API", "details": str(e)}
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            clean_content = clean_json_text(content)
            logger.debug(f"–û—á–∏—â–µ–Ω–Ω—ã–π JSON: {clean_content}")
            
            try:
                profile_data = json.loads(clean_content)
                logger.info("JSON —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                required_fields = ["name", "age", "profession", "pain_points", "communication_style", "traps"]
                missing_fields = [field for field in required_fields if field not in profile_data]
                
                if missing_fields:
                    return {
                        "error": "–ù–µ–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
                        "details": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}",
                        "raw_content": clean_content
                    }
                
                return profile_data
                
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(e)}")
                logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {clean_content}")
                return {
                    "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è",
                    "details": str(e),
                    "raw_content": clean_content
                }
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}", "details": response.text}
            
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return {"error": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", "details": str(e)}

async def generate_responder(age: int, profession: str, trait: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞"""
    prompt = f"""
    –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:
    - –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
    - –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}
    - –•–∞—Ä–∞–∫—Ç–µ—Ä: {trait}

    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "name": "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –∏–º—è",
        "age": —á–∏—Å–ª–æ,
        "profession": "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
        "pain_points": ["3-4 –∫–ª—é—á–µ–≤—ã–µ –±–æ–ª–∏"],
        "communication_style": "2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è",
        "traps": ["3-4 —Å–ø–æ—Å–æ–±–∞, –∫–∞–∫ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç —É—Ö–æ–¥–∏—Ç –æ—Ç –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"]
    }}
    """
    
    try:
        response = generate_llm_response(prompt)
        
        if "error" in response:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {response}")
            return {
                "success": False,
                "message": f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: {response['error']}"
            }
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = f"""‚úÖ –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üë§ {response['name']}
üìä –í–æ–∑—Ä–∞—Å—Ç: {response['age']}
üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {response['profession']}

üé≠ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
{response['communication_style']}

‚ùóÔ∏è –ö–ª—é—á–µ–≤—ã–µ –±–æ–ª–∏:
""" + "\n".join(f"‚Ä¢ {point}" for point in response['pain_points']) + """

‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –≤ –æ–±—â–µ–Ω–∏–∏:
""" + "\n".join(f"‚Ä¢ {trap}" for trap in response['traps']) + """

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"""
        
        return {
            "success": True,
            "message": message,
            "data": response
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return {
            "success": False,
            "message": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        }

async def generate_interview_response(question: str, respondent_profile: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞"""
    try:
        prompt = f"""
        –¢—ã - —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º:
        –ò–º—è: {respondent_profile['name']}
        –í–æ–∑—Ä–∞—Å—Ç: {respondent_profile['age']}
        –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {respondent_profile['profession']}
        –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {respondent_profile['communication_style']}
        
        –¢–≤–æ–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏:
        {chr(10).join('- ' + point for point in respondent_profile['pain_points'])}
        
        –¢–≤–æ–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:
        {chr(10).join('- ' + trap for trap in respondent_profile['traps'])}
        
        –í–æ–ø—Ä–æ—Å: {question}
        
        –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏–º–µ–Ω—è—è –æ–¥–∏–Ω –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É–∫–ª–æ–Ω–µ–Ω–∏—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∏ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–≤–æ–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏.
        """
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}")
        response = generate_llm_response(prompt)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        content = response['choices'][0]['message'].get('content', '')
        reasoning = response['choices'][0]['message'].get('reasoning', '')
        answer = content if content else reasoning
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö JSON-–º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        clean_answer = re.sub(r'```.*?```', '', answer, flags=re.DOTALL)  # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –º–µ–∂–¥—É ```
        clean_answer = re.sub(r'\{.*?\}', '', clean_answer, flags=re.DOTALL)  # –£–¥–∞–ª—è–µ–º JSON
        clean_answer = clean_answer.strip()
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {clean_answer}")
        return clean_answer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {str(e)}")
        logger.error(traceback.format_exc())
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...")
        test_response = generate_llm_response("–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç")
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
        logger.info(f"–û—Ç–≤–µ—Ç: {json.dumps(test_response, ensure_ascii=False, indent=2)}")
    except Exception as e:
        logger.error(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    logger.info("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è...")
    test_profile = asyncio.run(generate_responder(35, "Product Manager", "—Å–∫–µ–ø—Ç–∏–∫"))
    print(json.dumps(test_profile, ensure_ascii=False, indent=2))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if "error" not in test_profile:
        logger.info("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å...")
        test_question = "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø—Ä–æ–¥—É–∫—Ç–∞?"
        test_answer = asyncio.run(generate_interview_response(test_question, test_profile))
        print(f"\n–í–æ–ø—Ä–æ—Å: {test_question}")
        print(f"–û—Ç–≤–µ—Ç: {test_answer}") 